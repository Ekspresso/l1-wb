package main

// –°—Ç—Ä–æ–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞: "1234üòÇ‚åòüëç coolüëç lolüòÇ hello"
// –ü–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∏–º–µ–Ω–Ω–æ –≤ –∫–∞–≤—ã—á–∫–∞—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã,
// —á—Ç–æ–±—ã —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–ª–∞—Å—å –∫–∞–∫ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç.

import (
	"fmt"
	"os"
)

// –°–ø–æ—Å–æ–± 1. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å –∑–∞–ø—É—Å–∫–æ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å–ª–æ–≤–∞.
// –ü–æ—Ä—è–¥–æ–∫ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–ª–æ–≤–µ –ø—Ä–∏ —ç—Ç–æ–º –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º.
func main() {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
	if len(os.Args) != 2 {
		fmt.Println("Error: Enter only 1 string")
		return
	}
	str := os.Args[1]
	rev := ""
	tempRev := ""
	tempWord := ""
	// –¶–∏–∫–ª for range –ø–æ —Å—Ä–µ–∑—É (string —è–≤–ª—è–µ—Ç—Å—è —Å—Ä–µ–∑–æ–º –±–∞–π—Ç) –≤–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ –ø–æ—Ä—è–¥–∫—É.
	// –¢–∞–∫–æ–π —Ü–∏–∫–ª, –ø—Ä–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ —Å—Ç—Ä–æ–∫–∞–º, —á–∏—Ç–∞–µ—Ç –Ω–µ –±–∞–π—Ç—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏,
	// –∞ —Ä—É–Ω—ã (–∫–æ–¥–æ–≤—ã–µ —Ç–æ—á–∫–∏), –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–∞–π—Ç.
	// –û–±—ã—á–Ω—ã–π —Ü–∏–∫–ª —Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π —à—ë–ª –±—ã —Ç–æ–ª—å–∫–æ –ø–æ–±–∞–π—Ç–æ–≤–æ, —á—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –±—ã –∫ –ø–æ—Ç–µ—Ä–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ —Å—Ç—Ä–æ–∫–∏.
	for _, valRun := range str {
		// –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª –Ω–µ –ø—Ä–æ–±–µ–ª, —Ç–æ —Å–ª–æ–≤–æ –ø—Ä–æ—Å—Ç–æ —Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é tempWord
		if string(valRun) != " " {
			tempWord += string(valRun)
		} else {
			// –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–±–µ–ª–æ–º, —Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø–∏—Å—å —Å–ª–æ–≤ —Å –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–æ–º.
			rev = tempWord + string(valRun)
			rev += tempRev
			tempRev = rev
			tempWord = ""
		}
	}
	// –ï—Å–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤ tempWord –µ—â—ë –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, —Ç–æ –æ–Ω–∏ –¥–æ–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏.
	if tempWord != "" {
		rev = tempWord + " "
		rev += tempRev
	}
	fmt.Println(rev)
}

// –°–ø–æ—Å–æ–± 2. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ Split
// –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ strings, –≥–¥–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–±–µ–ª.
// func main() {
// 	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
// 	if len(os.Args) != 2 {
// 		fmt.Println("Error: Enter only 1 string")
// 		return
// 	}
// 	str := os.Args[1]
// 	rev := ""
// 	tempRev := ""
// 	words := strings.Split(str, " ")
// 	for _, word := range words {
// 		if word != "" {
// 			rev = word + " "
// 			rev += tempRev
// 			tempRev = rev
// 		}
// 	}
// 	fmt.Println(rev)
// }
