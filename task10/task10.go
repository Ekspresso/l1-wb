// Дана последовательность температурных колебаний: -25.4, -27.0 13.0, 19.0, 15.5, 24.5, -21.0, 32.5.
// Объединить данные значения в группы с шагом в 10 градусов. Последовательность в подмножноствах не важна.

// Пример: -20:{-25.0, -27.0, -21.0}, 10:{13.0, 19.0, 15.5}, 20: {24.5}, etc.

package main

import (
	"fmt"
	"sync"
)

// Создание типа "подмножество", который представляет из себя карту, ключ которой - это температура, а значение - переменная типа bool.
type subSet map[float64]bool

// Создание нового подмножества с заполнением его переданным значением температуры.
func newSubSet(numb float64) subSet {
	var subset subSet
	subset = make(subSet)
	subset[numb] = true
	return subset
}

// Добавление значения температуры в множество Set в соответствующее подмножество subSet.
func addNumb(numb float64, set map[int64]subSet, wg *sync.WaitGroup, mutex *sync.Mutex) {
	defer wg.Done()
	var i int64
	// Определение подмножества, в которое необходимо записать numb (значение температуры)
	if numb < 0 {
		i = (int64(numb)/10 - 1) * 10
	} else {
		i = (int64(numb)/10 + 1) * 10
	}
	// Блокировка мьютекса для записи в множество Set.
	mutex.Lock()
	if set[i] != nil { // Если такое подмножество существует, то записываем значение.
		set[i][numb] = true
	} else { // Если такого подмножества нет, то создаём его, сразу записывая в него значение.
		set[i] = newSubSet(numb)
	}
	mutex.Unlock() // Разблокировка мьютекса для возвращения доступа к Set другим горутинам.
}

func main() {
	var mutex sync.Mutex
	var wg sync.WaitGroup
	// Массив с температурными значениями
	arr := [8]float64{-25.4, -27.0, 13.0, 19.0, 15.5, 24.5, -21.0, 32.5}
	// Создание множества Set с типом "карта", где ключ - это название подмножества, а значение - это само подмножество.
	// Подмножества определяются с шагом в 10 градусов. Если значение переменных отрицательное,
	// то подмножество называется минимальным возможным значением диапазона (если диапазон {-30:-20}, то название будет -30).
	// Если значение положительное, то подмножество будет называться максимальным возможным значением (если диапазон {10:20}, то название будет 20)
	// Пример возможных диапазонов, в которые записываются множества:
	// -20:{...}, -10:{...}, 10:{...}, 20:{...}, 30:{...} и т.д.
	set := make(map[int64]subSet)

	// Запуск горутин для заполнения множества подмножествами.
	for i := 0; i < len(arr); i++ {
		wg.Add(1)
		go addNumb(arr[i], set, &wg, &mutex)
	}
	// Ожидание окончания работы горутин
	wg.Wait()
	// Вывод результатов.
	for key, val := range set {
		fmt.Printf("%d:{", key)
		for k := range val {
			fmt.Printf("%.1f  ", k)
		}
		fmt.Printf("}\n")
	}
	// fmt.Println(set)
}
